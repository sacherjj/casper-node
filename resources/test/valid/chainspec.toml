[genesis]
name = 'test-chain'
timestamp = '2020-09-18T18:45:00Z'
protocol_version = '0.1.0'
mint_installer_path = 'mint.wasm'
pos_installer_path = 'pos.wasm'
standard_payment_installer_path = 'standard_payment.wasm'
auction_installer_path = 'auction_install.wasm'
accounts_path = 'accounts.csv'
validator_slots = 5
auction_delay = 3
locked_funds_period = 0
# (1+0.02)^((2^14)/31536000000)-1 is expressed as a fractional number below.
round_seigniorage_rate = [6_414, 623_437_335_209]
unbonding_delay = 14
# Wasmless transfer cost expressed in gas.
wasmless_transfer_cost = 10_000

[highway]
era_duration = '3minutes'
minimum_era_height = 9
finality_threshold_fraction = [2, 25]
minimum_round_exponent = 14
maximum_round_exponent = 19
reduced_reward_multiplier = [1, 5]

[deploys]
max_payment_cost = '9'
max_ttl = '10months'
max_dependencies = 11
max_block_size = 12
block_max_deploy_count = 125
block_max_transfer_count = 1000
block_gas_limit = 13

[wasm_config]
max_memory = 17
max_stack_height = 19

[wasm_config.opcode_costs]
# Bit operations multiplier.
bit = 13
# Arithmetic add operations multiplier.
add = 14
# Mul operations multiplier.
mul = 15
# Div operations multiplier.
div = 16
# Memory load operation multiplier.
load = 17
# Memory store operation multiplier.
store = 18
# Const store operation multiplier.
const = 19
# Local operations multiplier.
local = 20
# Global operations multiplier.
global = 21
# Control flow operations multiplier
control_flow = 22
# Integer operations multiplier.
integer_comparsion = 23
# Conversion operations multiplier.
conversion = 24
# Unreachable operation multiplier.
unreachable = 25
# Nop operation multiplier.
nop = 26
# Get current memory operation multiplier.
current_memory = 27
# Grow memory cost, per page (64kb)
grow_memory = 28
# Regular opcode cost
regular = 29

[wasm_config.storage_costs]
gas_per_byte = 101

# Host function declarations are located in smart_contracts/contract/src/ext_ffi.rs
[wasm_config.host_function_costs]
add = { cost = 100, arguments = [0, 1, 2, 3] }
add_associated_key = { cost = 101, arguments = [0, 1, 2] }
add_contract_version = { cost = 102, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] } # Not instrumented yet, assuming a sufficiently large number
blake2b = { cost = 133, arguments = [0, 1, 2, 3] }
call_contract = { cost = 104, arguments = [0, 1, 2, 3, 4, 5, 6] }
call_versioned_contract = { cost = 105, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8] } # Not instrumented yet, assuming the same as call_contract
create_contract_package_at_hash = { cost = 106, arguments = [0, 1] } # Not instrumented yet, assuming a sufficiently large number
create_contract_user_group = { cost = 107, arguments = [0, 1, 2, 3, 4, 5, 6, 7] } # Not instrumented yet, assuming a sufficiently large number
create_purse = { cost = 108, arguments = [0, 1] }
disable_contract_version = { cost = 109, arguments = [0, 1, 2, 3] } # Not instrumented yet, assuming a sufficiently large number
get_balance = { cost = 110, arguments = [0, 1, 2] }
get_blocktime = { cost = 111, arguments = [0] }
get_caller = { cost = 112, arguments = [0] }
get_key = { cost = 113, arguments = [0, 1, 2, 3, 4] }
get_main_purse = { cost = 114, arguments = [0] }
get_named_arg = { cost = 115, arguments = [0, 1, 2, 3] }
get_named_arg_size = { cost = 116, arguments = [0, 1, 2] }
get_phase = { cost = 117, arguments = [0] }
get_system_contract = { cost = 118, arguments = [0, 1, 2] }
has_key = { cost = 119, arguments = [0, 1] }
is_valid_uref = { cost = 120, arguments = [0, 1] }
load_named_keys = { cost = 121, arguments = [0, 1] }
new_uref = { cost = 122, arguments = [0, 1, 2] }
print = { cost = 123, arguments = [0, 1] }
provision_contract_user_group_uref = { cost = 124, arguments = [0,1,2,3,4] } # Not instrumented yet, assuming a sufficiently large number
put_key = { cost = 125, arguments = [0, 1, 2, 3] }
read_host_buffer = { cost = 126, arguments = [0, 1, 2] }
read_value = { cost = 127, arguments = [0, 1, 0] }
read_value_local = { cost = 128,  arguments = [0, 1, 0] }
remove_associated_key = { cost = 129, arguments = [0, 1] }
remove_contract_user_group = { cost = 130, arguments = [0, 1, 2, 3] } # Not instrumented yet, assuming a sufficiently large number
remove_contract_user_group_urefs = { cost = 131, arguments = [0,1,2,3,4,5] } # Not instrumented yet, assuming a sufficiently large number
remove_key = { cost = 132, arguments = [0, 1] }
ret = { cost = 133, arguments = [0, 1] }
revert = { cost = 134, arguments = [0] }
set_action_threshold = { cost = 135, arguments = [0, 1] }
transfer_from_purse_to_account = { cost = 136, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8] }
transfer_from_purse_to_purse = { cost = 137, arguments = [0, 1, 2, 3, 4, 5, 6, 7] }
transfer_to_account = { cost = 138, arguments = [0, 1, 2, 3, 4, 5, 6] }
update_associated_key = { cost = 139, arguments = [0, 1, 2] }
write = { cost = 140,  arguments = [0, 1, 0, 2] }
write_local = { cost = 141, arguments = [0, 1, 2, 3] }

[[upgrade]]
protocol_version = '0.2.0'
upgrade_installer_path = 'upgrade.wasm'

[upgrade.activation_point]
height = 23

[upgrade.new_wasm_config]
max_memory = 17
max_stack_height = 19

[upgrade.new_wasm_config.opcode_costs]
# Bit operations multiplier.
bit = 24
# Arithmetic add operations multiplier.
add = 25
# Mul operations multiplier.
mul = 26
# Div operations multiplier.
div = 27
# Memory load operation multiplier.
load = 28
# Memory store operation multiplier.
store = 29
# Const store operation multiplier.
const = 30
# Local operations multiplier.
local = 31
# Global operations multiplier.
global = 32
# Control flow operations multiplier.
control_flow = 33
# Integer operations multiplier.
integer_comparsion = 34
# Conversion operations multiplier.
conversion = 35
# Unreachable operation multiplier.
unreachable = 36
# Nop operation multiplier.
nop = 37
# Get current memory operation multiplier.
current_memory = 38
# Grow memory cost, per page (64kb)
grow_memory = 39
# Regular opcode cost
regular = 40

[upgrade.new_wasm_config.storage_costs]
gas_per_byte = 101

[upgrade.new_wasm_config.host_function_costs]
add = { cost = 1000, arguments = [0, 1, 2, 3] }
add_associated_key = { cost = 1001, arguments = [0, 1, 2] }
add_contract_version = { cost = 1002, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] } # Not instrumented yet, assuming a sufficiently large number
blake2b = { cost = 1043, arguments = [0, 1, 2, 3] }
call_contract = { cost = 1004, arguments = [0, 1, 2, 3, 4, 5, 6] }
call_versioned_contract = { cost = 1005, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8] } # Not instrumented yet, assuming the same as call_contract
create_contract_package_at_hash = { cost = 1006, arguments = [0, 1] } # Not instrumented yet, assuming a sufficiently large number
create_contract_user_group = { cost = 1007, arguments = [0, 1, 2, 3, 4, 5, 6, 7] } # Not instrumented yet, assuming a sufficiently large number
create_purse = { cost = 1008, arguments = [0, 1] }
disable_contract_version = { cost = 1009, arguments = [0, 1, 2, 3] } # Not instrumented yet, assuming a sufficiently large number
get_balance = { cost = 1010, arguments = [0, 1, 2] }
get_blocktime = { cost = 1011, arguments = [0] }
get_caller = { cost = 1012, arguments = [0] }
get_key = { cost = 1013, arguments = [0, 1, 2, 3, 4] }
get_main_purse = { cost = 1014, arguments = [0] }
get_named_arg = { cost = 1015, arguments = [0, 1, 2, 3] }
get_named_arg_size = { cost = 1016, arguments = [0, 1, 2] }
get_phase = { cost = 1017, arguments = [0] }
get_system_contract = { cost = 1018, arguments = [0, 1, 2] }
has_key = { cost = 1019, arguments = [0, 1] }
is_valid_uref = { cost = 1020, arguments = [0, 1] }
load_named_keys = { cost = 1021, arguments = [0, 1] }
new_uref = { cost = 1022, arguments = [0, 1, 2] }
print = { cost = 1023, arguments = [0, 1] }
provision_contract_user_group_uref = { cost = 1024, arguments = [0,1,2,3,4] } # Not instrumented yet, assuming a sufficiently large number
put_key = { cost = 1025, arguments = [0, 1, 2, 3] }
read_host_buffer = { cost = 1026, arguments = [0, 1, 2] }
read_value = { cost = 1027, arguments = [0, 1, 0] }
read_value_local = { cost = 1028,  arguments = [0, 1, 0] }
remove_associated_key = { cost = 1029, arguments = [0, 1] }
remove_contract_user_group = { cost = 1030, arguments = [0, 1, 2, 3] } # Not instrumented yet, assuming a sufficiently large number
remove_contract_user_group_urefs = { cost = 1031, arguments = [0,1,2,3,4,5] } # Not instrumented yet, assuming a sufficiently large number
remove_key = { cost = 1032, arguments = [0, 1] }
ret = { cost = 1033, arguments = [0, 1] }
revert = { cost = 1034, arguments = [0] }
set_action_threshold = { cost = 1035, arguments = [0, 1] }
transfer_from_purse_to_account = { cost = 1036, arguments = [0, 1, 2, 3, 4, 5, 6, 7, 8] }
transfer_from_purse_to_purse = { cost = 1037, arguments = [0, 1, 2, 3, 4, 5, 6, 7] }
transfer_to_account = { cost = 1038, arguments = [0, 1, 2, 3, 4, 5, 6] }
update_associated_key = { cost = 1039, arguments = [0, 1, 2] }
write = { cost = 1040,  arguments = [0, 1, 0, 2] }
write_local = { cost = 1041, arguments = [0, 1, 2, 3] }

[upgrade.new_deploy_config]
max_payment_cost = '34'
max_ttl = '35years'
max_dependencies = 36
max_block_size = 37
block_max_deploy_count = 375
block_max_transfer_count = 376
block_gas_limit = 38

[[upgrade]]
protocol_version = '0.3.0'

[upgrade.activation_point]
height = 39
