---
# Quick checks to make before spending time on test and package.clone:
# on failure -> failed-pre-checks pipeline
# on success --> cargo-test (parallel) ---> [ test-package-success | test-package-failure ]
#            \-> package  (parallel) ----/
kind: pipeline
type: docker
name: pre-checks

# Steps perform as fast serially, due to file thrashing.
steps:
  - name: verify-genesis-checksums
    image: casperlabs/node-build-u1804
    commands:
      - "./ci/check_genesis_validation.sh $(pwd)/resources/production"

  - name: cargo-fmt
    image: casperlabs/node-build-u1804
    commands:
      - rustup component add rustfmt
      - cargo fmt --all -- --check

  - name: cargo-clippy
    image: casperlabs/node-build-u1804
    environment:
      RUSTFLAGS: '-D warnings'
    commands:
      - make setup-rs
      - rustup component add clippy
      - cargo clippy --all-targets --all-features --workspace

  - name: cargo-audit
    image: casperlabs/node-build-u1804
    commands:
      - cargo install cargo-audit
      - cargo generate-lockfile
      - cargo audit

trigger:
  branch:
    - master
    - trying
    - staging
    - "release-*"

---
# Failure state from pre-checks pipeline
kind: pipeline
type: docker
name: failed-pre-checks

clone:
  disable: true

steps:
  - name: notify
    image: plugins/slack
    settings:
      webhook:
        from_secret: slack_webhook
      template:
        - |
          casper-node build status: *{{ uppercasefirst build.status }}*
          Author: {{ build.author }}
          Drone Build: <{{ build.link }}|#{{ build.number }}>
          Commit Link: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 10 }}>
trigger:
  status:
    - failure
  branch:
    - master
    - trying
    - staging
    - "release-*"

depends_on:
  - pre-checks

---
# Testing pipeline, runs in parallel with package pipeline
kind: pipeline
type: docker
name: cargo-test

steps:
- name: updater-dry-run
  image: casperlabs/node-build-u1804
  commands:
  - cargo run --package=casper-updater -- --root-dir=. --dry-run

- name: cargo-test
  image: casperlabs/node-build-u1804
  commands:
  - make setup
  - make test
  - make test-contracts

- name: client-ffi-tests-and-examples
  image: casperlabs/node-build-u1804
  commands:
  - make setup-rs
  - cmake -Hclient/examples/ffi -Btarget/build -DCMAKE_BUILD_TYPE=Debug
  - cmake --build target/build
  - ./target/build/ffi-tests
  - ./target/build/get-auction-info
  - ./target/build/put-deploy

depends_on:
  - pre-checks

trigger:
  branch:
    - master
    - trying
    - staging
    - "release-*"

---
# Packaging pipeline, runs in parallel with cargo-test pipeline
kind: pipeline
type: docker
name: package

steps:
- name: build-deb-update-revision
  image: casperlabs/node-build-u1804
  commands:
    - "./update-rev.sh"

- name: build-deb
  image: casperlabs/node-build-u1804
  commands:
    - make setup-rs
    - "make deb"

- name: test-deb
  image: ubuntu:bionic
  commands:
    - "apt update"
    - "$(pwd)/ci/test_deb.sh $(pwd) casper-client"
    - "$(pwd)/ci/test_deb.sh $(pwd) casper-node"

- name: put-drone-s3-cache
  image: casperlabs/s3cmd-build:latest
  commands:
    - ./ci/drone_s3_storage.sh put $(pwd)/target/debian/ debian/
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  when:
    branch:
      - master
      - "release-*"
    event:
      - push

- name: build-wasm-package-push-to-s3
  image: casperlabs/s3cmd-build:latest
  commands:
    - "./build_wasm_package.sh"
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  when:
    branch:
    - master
    - "release-*"
    event:
    - push

depends_on:
  - pre-checks

trigger:
  branch:
    - master
    - trying
    - staging
    - "release-*"

---
# Run on success of cargo-test and package pipelines.
kind: pipeline
type: docker
name: test-package-success

steps:
  # Retrieving packages built and put in s3 from package pipeline.
- name: get-and-del-drone-s3-cache
  image: casperlabs/s3cmd-build:latest
  commands:
    - ./ci/drone_s3_storage.sh get debian/ $(pwd)/target/debian/
    - ./ci/drone_s3_storage.sh del
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  when:
    branch:
      - master
      - "release-*"
    event:
      - push

  # we want to publish to the test repo, only when code is pushed to master or release-* branch.
  # bors should make sure, that it has passed on staging or trying branches
- name: publish-test-bintray
  image: casperlabs/node-build-u1804
  commands:
    - "./upload.sh --repo-name casper-debian-tests --package-name casper-node"
    - "./upload.sh --repo-name casper-debian-tests --package-name casper-client"
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  when:
    branch:
      - master
      - "release-*"
    event:
      - push

depends_on:
  - cargo-test
  - package

trigger:
  branch:
    - master
    - trying
    - staging
    - "release-*"


---
# Runs on failure of cargo-test or package pipelines.
kind: pipeline
type: docker
name: test-package-failure

clone:
  disable: true

steps:
- name: del-s3-cache
  image: casperlabs/s3cmd-build:latest
  commands:
    - ./ci/drone_s3_storage.sh del
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  when:
    branch:
      - master
      - "release-*"
    event:
      - push

- name: notify
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_webhook
    template:
      - |
        casper-node build status: *{{ uppercasefirst build.status }}*
        Author: {{ build.author }}
        Drone Build: <{{ build.link }}|#{{ build.number }}>
        Commit Link: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 10 }}>

trigger:
  status:
    - failure
  branch:
    - master
    - trying
    - staging
    - "release-*"

depends_on:
  - cargo-test
  - package

# TAGGING PIPELINES
# release-by-tag
#      | (failure)
# failed-tag
---
# act on release - when the tag is created
kind: pipeline
type: docker
name: release-by-tag

steps:
- name: update-revision
  image: casperlabs/node-build-u1804
  commands:
    - "./update-rev.sh"

- name: build-deb
  image: casperlabs/node-build-u1804
  commands:
    - "make deb"

- name: publish-crate-tag-TODO
  image: casperlabs/node-build-u1804
  commands:
  - "echo TODO"

- name: publish-prod-bintray
  image: casperlabs/node-build-u1804
  commands:
  - "./upload.sh --repo-name debian --package-name casper-node"
  - "./upload.sh --repo-name debian --package-name casper-client"
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host

- name: publish-github-pre-release
  image: plugins/github-release
  settings:
    api_key:
      from_secret: github_token
    checksum:
    - sha256
    - md5
    files:
    - "./target/debian/*.deb"
    prerelease:
    - true
  when:
    ref:
    - refs/tags/v*

# push to test repo every time we are going to merge to master (via staging), trying or pushing to release (hot fix)
trigger:
  ref:
  - refs/tags/v*
---
kind: pipeline
type: docker
name: failed-tag

clone:
  disable: true

steps:
- name: notify
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_webhook
    template:
    - |
      casper-node build status: *{{ uppercasefirst build.status }}*
      Author: {{ build.author }}
      Drone Build: <{{ build.link }}|#{{ build.number }}>
      Commit Link: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 10 }}>
trigger:
  status:
  - failure
  ref:
    - refs/tags/v*

depends_on:
- release-by-tag
